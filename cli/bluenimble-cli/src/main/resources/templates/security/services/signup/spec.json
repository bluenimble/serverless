{
	
	    "verb": "post",
	"endpoint": "/security/signup",
	    "name": "Signup",
	
	"spec": {
		"fields": {
			"Content-Type": { "scope": "h", "enum": [ "application/json" ] },
			"payload": { "type": "Credentials",
				"fields": {
					"user": 	{ 
						"title": "Email", 
						"transforms": [{
							"name": "lowercase"
						}] 
					}, 
					"password": { 
                        "title": "Password",
						"min": "8", 
						"vType": "Regex", 
						"secret": "true",
						"format": "^(?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9])(?=.*[a-z]).{8,}$", 
						"errMsg": "Weak password! It should be 8 characters or more, contains at least 1 upper case letter, another in lower case, one numeral and one of the special characters !@#$&*" 
					}
				}
			}
		}
	},
	
	"security": {
		"enabled": "false"
	},
	
	"meta": {
		"tags": ["Security", "Signup"]
	},
	
	"spi": {
		"class": "im.default:SignupSpi"
		/**
		 * Uncomment this section: 1. to set email preferences for signing users  2. change default configuration 
		 *
		// if set to true, an email will be send to the user using the "email" configuration bellow
		"requiresActivation": "true",
		// set to true if the username is his email, it will be used to send the activation email 
		"useUserAsEmailAddress": "true",
		"email": {
			"messenger": "my-smtp-config", // in order to add a config, use add feature command. (Required)
			"fromEmail": "", // a preference email such as welcome@your-business.com. (Optional)
			"fromName": "XYZ Team", // a preference sender name. (Optional)
			"subject": "Welcome to XYZ", // signup email subject. (Optional)
			"template": "templates/emails/signup.html", // an html email template to use. There is one by default in you api resources folder. (Required)
		},
		// the database feature holding the users table/entity
		"database": "default",
		// the users table/entity
		"usersEntity": "Users",
		// username property name in the users table/entity, default to 'email'
		"userProperty": "email",
		// password property name in the users table/entity
		"passwordProperty": "password",
		// activationCode property name in the users table/entity
		"activationCodeProperty": "activationCode",
		// find an existing user with the same email. If any, an error will be send back to the calling application
		"query": {
			"where": { "email": "" }
		}
		 
		 *
		 **/
	}
	
}